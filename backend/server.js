const express = require('express');
const cors = require('cors');
//const path = require('path');
require('dotenv').config();

// –Ü–º–ø–æ—Ä—Ç Firebase –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
const { initializeFirebase, getDatabase, verifyIdToken } = require('./config/firebase');

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Express
const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors({
    origin: process.env.FRONTEND_URL,
    credentials: true,
}));
app.use(express.json());

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Firebase
let db;
try {
    const firebaseApp = initializeFirebase();
    db = getDatabase();
} catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error.message);
    console.error('üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Firebase –≤ .env —Ñ–∞–π–ª—ñ');
    process.exit(1);
}

// Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
const verifyToken = async (req, res, next) => {
    const authHeader = req.headers.authorization;

    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return res.status(401).json({
            success: false,
            error: '–¢–æ–∫–µ–Ω –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –Ω–µ –Ω–∞–¥–∞–Ω–æ'
        });
    }

    const token = authHeader.split('Bearer ')[1];

    try {
        const decodedToken = await verifyIdToken(token);
        req.user = decodedToken;
        next();
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
        return res.status(401).json({
            success: false,
            error: '–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó'
        });
    }
};

// –•–æ—Å—Ç–∏–Ω–≥ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
//if (process.env.NODE_ENV === 'production') {
    //app.use(express.static(path.join(__dirname, '../frontend/build')));
//}

// API Routes

// –ë–∞–∑–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ä–æ–±–æ—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (req, res) => {
  res.send('API is running');
});

// –¢–£–†–ò
// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ç—É—Ä–∏
app.get('/api/tours', async (req, res) => {
    try {
        const { country, sortBy, sortOrder } = req.query;

        let query = db.collection('tours');

        // –§—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è –∑–∞ –∫—Ä–∞—ó–Ω–æ—é
        if (country) {
            query = query.where('country', '==', country);
        }

        const snapshot = await query.get();
        let tours = snapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
        }));

        // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        if (sortBy) {
            tours.sort((a, b) => {
                const aValue = a[sortBy] || 0;
                const bValue = b[sortBy] || 0;

                if (sortOrder === 'desc') {
                    return bValue - aValue;
                }
                return aValue - bValue;
            });
        }

        res.json({
            success: true,
            data: tours,
            count: tours.length
        });
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—É—Ä—ñ–≤:', error);
        res.status(500).json({
            success: false,
            error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç—É—Ä—ñ–≤'
        });
    }
});

// –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç—É—Ä
app.get('/api/tours/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const tourDoc = await db.collection('tours').doc(id).get();

        if (!tourDoc.exists) {
            return res.status(404).json({
                success: false,
                error: '–¢—É—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
            });
        }

        res.json({
            success: true,
            data: {
                id: tourDoc.id,
                ...tourDoc.data()
            }
        });
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—É—Ä—É:', error);
        res.status(500).json({
            success: false,
            error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ —Ç—É—Ä'
        });
    }
});

// –í–Ü–î–ì–£–ö–ò
// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏ –¥–ª—è —Ç—É—Ä—É
app.get('/api/tours/:tourId/reviews', async (req, res) => {
    try {
        const { tourId } = req.params;

        const reviewsSnapshot = await db.collection('reviews')
            .where('tourId', '==', tourId)
            .orderBy('createdAt', 'desc')
            .get();

        const reviews = reviewsSnapshot.docs.map(doc => {
            const data = doc.data();
            return {
                id: doc.id,
                ...data,
                createdAt: data.createdAt?.toDate?.() || data.createdAt
            };
        });

        res.json({
            success: true,
            data: reviews,
            count: reviews.length
        });
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—ñ–≤:', error);
        res.status(500).json({
            success: false,
            error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏'
        });
    }
});

// –î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫ (–ø–æ—Ç—Ä–µ–±—É—î –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó)
app.post('/api/tours/:tourId/reviews', verifyToken, async (req, res) => {
    try {
        const { tourId } = req.params;
        const { text, rating } = req.body;
        const userId = req.user.uid;
        const userName = req.user.name || req.user.email;

        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        if (!text || !rating) {
            return res.status(400).json({
                success: false,
                error: '–¢–µ–∫—Å—Ç –≤—ñ–¥–≥—É–∫—É —Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏'
            });
        }

        if (text.length < 10 || text.length > 500) {
            return res.status(400).json({
                success: false,
                error: '–î–æ–≤–∂–∏–Ω–∞ –≤—ñ–¥–≥—É–∫—É –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 10 –¥–æ 500 —Å–∏–º–≤–æ–ª—ñ–≤'
            });
        }

        if (rating < 1 || rating > 5) {
            return res.status(400).json({
                success: false,
                error: '–†–µ–π—Ç–∏–Ω–≥ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 5'
            });
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç—É—Ä—É
        const tourDoc = await db.collection('tours').doc(tourId).get();
        if (!tourDoc.exists) {
            return res.status(404).json({
                success: false,
                error: '–¢—É—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
            });
        }

        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É
        const reviewData = {
            tourId,
            userId,
            userName,
            text,
            rating: parseInt(rating),
            createdAt: require('firebase-admin').firestore.FieldValue.serverTimestamp()
        };

        const reviewRef = await db.collection('reviews').add(reviewData);

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É —Ç—É—Ä—É
        await updateTourRating(tourId);

        res.status(201).json({
            success: true,
            data: {
                id: reviewRef.id,
                ...reviewData,
                createdAt: new Date()
            },
            message: '–í—ñ–¥–≥—É–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ'
        });
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É:', error);
        res.status(500).json({
            success: false,
            error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫'
        });
    }
});

// –ë–†–û–ù–Æ–í–ê–ù–ù–Ø
// –°—Ç–≤–æ—Ä–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (–ø–æ—Ç—Ä–µ–±—É—î –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó)
app.post('/api/bookings', verifyToken, async (req, res) => {
    try {
        const userId = req.user.uid;
        const bookingData = req.body;

        // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        const requiredFields = ['tourId', 'firstName', 'lastName', 'email', 'phone', 'travelers', 'startDate', 'endDate'];
        const missingFields = requiredFields.filter(field => !bookingData[field]);

        if (missingFields.length > 0) {
            return res.status(400).json({
                success: false,
                error: `–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: ${missingFields.join(', ')}`
            });
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç—É—Ä—É
        const tourDoc = await db.collection('tours').doc(bookingData.tourId).get();
        if (!tourDoc.exists) {
            return res.status(404).json({
                success: false,
                error: '–¢—É—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
            });
        }

        const booking = {
            ...bookingData,
            userId,
            status: 'pending',
            createdAt: require('firebase-admin').firestore.FieldValue.serverTimestamp()
        };

        const bookingRef = await db.collection('bookings').add(booking);

        res.status(201).json({
            success: true,
            data: {
                id: bookingRef.id,
                ...booking,
                createdAt: new Date()
            },
            message: '–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ'
        });
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:', error);
        res.status(500).json({
            success: false,
            error: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è'
        });
    }
});

// –û—Ç—Ä–∏–º–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.get('/api/my-bookings', verifyToken, async (req, res) => {
    try {
        const userId = req.user.uid;

        const bookingsSnapshot = await db.collection('bookings')
            .where('userId', '==', userId)
            .orderBy('createdAt', 'desc')
            .get();

        const bookings = await Promise.all(bookingsSnapshot.docs.map(async (doc) => {
            const bookingData = doc.data();

            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ç—É—Ä
            const tourDoc = await db.collection('tours').doc(bookingData.tourId).get();
            const tourData = tourDoc.exists ? tourDoc.data() : null;

            return {
                id: doc.id,
                ...bookingData,
                tour: tourData,
                createdAt: bookingData.createdAt?.toDate?.() || bookingData.createdAt
            };
        }));

        res.json({
            success: true,
            data: bookings,
            count: bookings.length
        });
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω—å:', error);
        res.status(500).json({
            success: false,
            error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è'
        });
    }
});

// –£–õ–Æ–ë–õ–ï–ù–Ü
// –î–æ–¥–∞—Ç–∏ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö
app.post('/api/favorites', verifyToken, async (req, res) => {
    try {
        const userId = req.user.uid;
        const { tourId } = req.body;

        if (!tourId) {
            return res.status(400).json({
                success: false,
                error: 'ID —Ç—É—Ä—É —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º'
            });
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç—É—Ä –≤–∂–µ –≤ —É–ª—é–±–ª–µ–Ω–∏—Ö
        const existingFavorite = await db.collection('favorites')
            .where('userId', '==', userId)
            .where('tourId', '==', tourId)
            .get();

        if (!existingFavorite.empty) {
            return res.status(400).json({
                success: false,
                error: '–¢—É—Ä –≤–∂–µ –≤ —É–ª—é–±–ª–µ–Ω–∏—Ö'
            });
        }

        const favoriteData = {
            userId,
            tourId,
            createdAt: require('firebase-admin').firestore.FieldValue.serverTimestamp()
        };

        const favoriteRef = await db.collection('favorites').add(favoriteData);

        res.status(201).json({
            success: true,
            data: {
                id: favoriteRef.id,
                ...favoriteData,
                createdAt: new Date()
            },
            message: '–¢—É—Ä –¥–æ–¥–∞–Ω–æ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö'
        });
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö:', error);
        res.status(500).json({
            success: false,
            error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö'
        });
    }
});

// –í–∏–¥–∞–ª–∏—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö
app.delete('/api/favorites/:tourId', verifyToken, async (req, res) => {
    try {
        const userId = req.user.uid;
        const { tourId } = req.params;

        const favoriteSnapshot = await db.collection('favorites')
            .where('userId', '==', userId)
            .where('tourId', '==', tourId)
            .get();

        if (favoriteSnapshot.empty) {
            return res.status(404).json({
                success: false,
                error: '–¢—É—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —É–ª—é–±–ª–µ–Ω–∏—Ö'
            });
        }

        await favoriteSnapshot.docs[0].ref.delete();

        res.json({
            success: true,
            message: '–¢—É—Ä –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö'
        });
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö:', error);
        res.status(500).json({
            success: false,
            error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö'
        });
    }
});

// –û—Ç—Ä–∏–º–∞—Ç–∏ —É–ª—é–±–ª–µ–Ω—ñ —Ç—É—Ä–∏
app.get('/api/favorites', verifyToken, async (req, res) => {
    try {
        const userId = req.user.uid;

        const favoritesSnapshot = await db.collection('favorites')
            .where('userId', '==', userId)
            .get();

        const favorites = await Promise.all(favoritesSnapshot.docs.map(async (doc) => {
            const favoriteData = doc.data();

            // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ç—É—Ä
            const tourDoc = await db.collection('tours').doc(favoriteData.tourId).get();
            const tourData = tourDoc.exists ? tourDoc.data() : null;

            return {
                id: doc.id,
                ...favoriteData,
                tour: tourData,
                createdAt: favoriteData.createdAt?.toDate?.() || favoriteData.createdAt
            };
        }));

        res.json({
            success: true,
            data: favorites,
            count: favorites.length
        });
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–ª—é–±–ª–µ–Ω–∏—Ö:', error);
        res.status(500).json({
            success: false,
            error: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —É–ª—é–±–ª–µ–Ω—ñ —Ç—É—Ä–∏'
        });
    }
});

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É —Ç—É—Ä—É
async function updateTourRating(tourId) {
    try {
        const reviewsSnapshot = await db.collection('reviews')
            .where('tourId', '==', tourId)
            .get();

        const reviews = reviewsSnapshot.docs.map(doc => doc.data());

        if (reviews.length === 0) return;

        const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
        const averageRating = totalRating / reviews.length;

        await db.collection('tours').doc(tourId).update({
            rating: Number(averageRating.toFixed(1)),
            reviewCount: reviews.length
        });
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É —Ç—É—Ä—É:', error);
    }
}

// –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –¥–ª—è SPA (—è–∫—â–æ —Ü–µ production)
//if (process.env.NODE_ENV === 'production') {
    //app.get('*', (req, res) => {
      //  res.sendFile(path.join(__dirname, '../frontend/build', 'index.html'));
   // });
//}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìç API –¥–æ—Å—Ç—É–ø–Ω–µ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: http://localhost:${PORT}/api`);
    if (process.env.NODE_ENV === 'production') {
        console.log(`üåê –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∞ –∞–¥—Ä–µ—Å–æ—é: http://localhost:${PORT}`);
    }
});
